// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (https://www.specflow.org/).
//      SpecFlow Version:3.9.0.0
//      SpecFlow Generator Version:3.9.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace Unitverse.Specs.Strategies.PropertyGenerator
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("NotifyPropertyChangedGeneration")]
    public partial class NotifyPropertyChangedGenerationFeature
    {
        
        private TechTalk.SpecFlow.ITestRunner testRunner;
        
        private string[] _featureTags = ((string[])(null));
        
#line 1 "NotifyPropertyChangedGeneration.feature"
#line hidden
        
        [NUnit.Framework.OneTimeSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Strategies/PropertyGenerator", "NotifyPropertyChangedGeneration", "\tI am checking the Notify Property Changed Generation strategy", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.OneTimeTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<NUnit.Framework.TestContext>(NUnit.Framework.TestContext.CurrentContext);
        }
        
        public virtual void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Notify Property Changed Generation")]
        public virtual void NotifyPropertyChangedGeneration()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Notify Property Changed Generation", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 5
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
 testRunner.Given("I have a class defined as", "using System.ComponentModel;\r\nusing System.Windows.Media;\r\n\r\nnamespace AssemblyCo" +
                        "re\r\n{\r\n   public class PropertyChange : BaseCl\r\n   {\r\n       private string name" +
                        ";\r\n\r\n       public string Name\r\n       {\r\n           get { return name; }\r\n     " +
                        "      set\r\n           {\r\n               name = value;\r\n               OnProperty" +
                        "Changed(\"Name\");\r\n           }\r\n       }\r\n\r\n       private string lastname;\r\n\r\n " +
                        "      public string LastName\r\n       {\r\n           get { return lastname; }\r\n   " +
                        "        set\r\n           {\r\n               lastname = value;\r\n               OnPr" +
                        "opertyChanged(\"LastName\");\r\n           }\r\n       }\r\n\r\n       private string full" +
                        "Name;\r\n\r\n       public string FullName\r\n       {\r\n           get { return fullNa" +
                        "me; }\r\n           set\r\n           {\r\n               fullName = value;\r\n         " +
                        "      OnPropertyChanged(\"FullName\");\r\n           }\r\n       }\r\n\r\n       private C" +
                        "olor color;\r\n\r\n       public Color Color\r\n       {\r\n           get { return colo" +
                        "r; }\r\n           set\r\n           {\r\n               color = value;\r\n             " +
                        "  OnPropertyChanged(\"Color\");\r\n           }\r\n       }\r\n\r\n\tpublic string notChang" +
                        "e { get}\r\n\r\n       public PropertyChange()\r\n       {\r\n\r\n       }\r\n   }\r\n\r\n   pub" +
                        "lic class BaseCl : INotifyPropertyChanged\r\n   {\r\n       public event PropertyCha" +
                        "ngedEventHandler PropertyChanged;\r\n\r\n       protected void OnPropertyChanged(str" +
                        "ing propertyName)\r\n       {\r\n           if (PropertyChanged != null)\r\n          " +
                        "     PropertyChanged(this, new PropertyChangedEventArgs(propertyName));\r\n       " +
                        "}\r\n   }\r\n}", ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 83
 testRunner.And("I set my test framework to \'NUnit3\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 84
 testRunner.And("I set my mock framework to \'FakeItEasy\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 85
 testRunner.When("I generate tests for the property using the strategy \'NotifyPropertyChangedGenera" +
                        "tionStrategy\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 86
 testRunner.Then("I expect a method called \'CanSetAndGetName\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 87
  testRunner.And("I expect it to contain the statement \'_testClass.CheckProperty(x => x.Name);\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 88
 testRunner.And("I expect a method called \'CanSetAndGetLastName\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 89
  testRunner.And("I expect it to have the attribute \'Test\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 90
 testRunner.And("I expect a method called \'CanSetAndGetFullName\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 91
 testRunner.And("I expect a method called \'CanSetAndGetColor\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 92
  testRunner.And("I expect it to contain the statement \'_testClass.CheckProperty(x => x.Color, defa" +
                        "ult(Color), default(Color));\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 93
 testRunner.And("I expect no method with a name like \'.*notChange.*\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
